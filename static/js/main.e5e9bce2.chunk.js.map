{"version":3,"sources":["App.js","serviceWorker.js","index.js","watersolid.svg"],"names":["App","setName","event","console","log","state","city","setState","target","value","setComment","comment","postComment","temp","listofcomment","index","getDetails","a","async","show","start","loading","fetch","fromapi","ok","json","data","main","weather","wind","speed","humidity","pressure","maxtemp","temp_max","mintemp","temp_min","sunrise","sys","sunset","name","country","dis","city1","com","this","map","eachEntry","className","id","type","onChange","placeholder","onClick","Date","toLocaleDateString","weekday","year","month","day","src","watersolid","alt","toLocaleTimeString","rows","columns","style","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.e5e9bce2.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport watersolid from './watersolid.svg'\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      name:'',\n      city:'',\n      dis:'none',\n      temp:'',\n      maxtemp:'',\n      mintemp:'',\n      city1:'',\n      weather:'',\n      wind:'',\n      humidity:'',\n      pressure:'',\n      sunrise:'',\n      sunset:'',\n      loading:'Searching City name...',\n      country:'',\n      show:false,\n      start:false,\n      index:0,\n      comment:'',\n      listofcomment:[],\n    };\n  }\n\n\n  setName=(event)=>{\n    console.log(this.state.city)\n    this.setState({\n      city:event.target.value\n    })\n  };\n\n  setComment=(event)=>{\n    this.setState({\n      comment:event.target.value\n    });\n    console.log(this.state.comment)\n    };\n\n    postComment=()=>{\n      if(this.state.comment!==''){\n      let temp={\n        comment:this.state.comment\n      }\n        this.setState({\n          listofcomment:[...this.state.listofcomment,temp],\n          index:this.state.index+1,\n          comment:''\n        });\n      }\n    }\n\n  getDetails=async()=>{\n      this.setState({\n        show:false,\n        start:true,\n        loading:'Searching City name...',\n      });\n      const fromapi=await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=57d78295d5b9ba6a263f5fd2e10e93cb&units=imperial`);\n      \n      if(fromapi.ok){\n\n      const data=await fromapi.json();\n      this.setState({\n        temp:data.main.temp,\n        weather:data.weather[0].main,\n        wind:data.wind.speed,\n        humidity:data.main.humidity,\n        pressure:data.main.pressure,\n        maxtemp:data.main.temp_max,\n        mintemp:data.main.temp_min,\n        sunrise:data.sys.sunrise,\n        sunset:data.sys.sunset,\n        name:data.name,\n        country:data.sys.country,\n        show:true,\n      });\n    }\n    else{\n      this.setState({\n        loading:'City Name not found',\n      });\n    }\n    };\n\n\n  render(){\n    let com=this.state.listofcomment.map((eachEntry,index)=>(\n      <p><i className=\"fa fa-user\"></i>{eachEntry.comment}</p>\n    ))\n\n    return(\n      <div className=\"app-body\">\n        \n        <span id=\"input\">\n        <input type=\"text\" \n        onChange={(event)=>this.setName(event)} \n        value={this.state.city} \n        id=\"searchBar\"\n        placeholder=\"Enter City Name...\"/>\n        <button id=\"searchButton\" onClick={this.getDetails}>Search</button>\n        </span>\n\n        {this.state.show&&<div className=\"weather-div\" >\n    <p className=\"city\">\n      {this.state.name},\n      {this.state.country},\n      {new Date().toLocaleDateString('en-US',{weekday: \"short\",year: \"numeric\",month:\"short\",day:\"2-digit\"})}\n    </p>\n          <div className=\"container\">\n            <span className=\"temp\">\n              <p>{this.state.temp}<sup>o</sup>C  <img src={watersolid} id=\"water\" alt=\"water-solid\"/></p>\n            </span>\n\n          <span className=\"details\">\n            <p>\n              Weather:<b>{this.state.weather}</b><br/>\n              Wind:<b>{this.state.wind} km/h</b>\n            </p>\n            <p>\n              Humidity:<b>{this.state.humidity}%</b><br/>\n              Pressure:<b>{this.state.pressure} Pa</b>\n            </p>\n            <p>\n              Max Temp:<b>{this.state.maxtemp}<sup>o</sup>C</b><br/>\n              Min Temp:<b>{this.state.mintemp}<sup>o</sup>C</b>\n            </p>\n            <p>\n              Sunrise: <b>{new Date(this.state.sunrise*1000).toLocaleTimeString('en-GB')}</b><br/>\n              Sunset: <b>{new Date(this.state.sunset*1000).toLocaleTimeString('en-GB')}</b>\n            </p>\n          </span>\n          </div>\n          \n      </div>}\n        {!this.state.show&&this.state.start&&<div id=\"loading\">\n        {this.state.loading}\n      </div>}\n\n      {this.state.show &&\n        <div id=\"comment_container\">\n          <textarea rows=\"4\" columns=\"500\" id=\"textarea\" placeholder=\"Enter your comment here...\"\n          onChange={(event)=>this.setComment(event)} value={this.state.comment}/><br/>\n          <button id=\"searchButton\" onClick={this.postComment}>Comment</button><br/>\n          <div id=\"comments\">\n          <p style={{color:'#484848'}}><b>Comments({this.state.index})</b></p>\n          {com}\n        </div>\n      </div>\n\n  }\n\n\n      </div>\n    )\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/watersolid.ab90635d.svg\";"],"sourceRoot":""}